# i10n

# Для некоторых терминов с большим количество букв принято использовать сокращения: l10nl10n вместо localizationlocalization или i18ni18n вместо internationalizationinternationalization.

# Вам дан набор из nn строк длиной не более 20 символов.

# Для каждой строки ww определим сокращение pNspNs, где pp – некоторый непустой префикс строки ww, ss – некоторый непустой суффикс строки ww, NN – целое число больше единицы, которое задает количество пропущенных букв между префиксом и суффиксом. Будем рассматривать только такие сокращения, где длины pp и ss совпадают.

# Из всех сокращений для каждого слова из набора найдите такое, что никакое другое слово не может быть сокращено таким же образом.
# Формат ввода

# В первой строке записаны число nn (1≤n≤50 0001≤n≤50000).

# В каждой из следующих nn строк записано одно слово ww (4≤∣w∣≤204≤∣w∣≤20). Все слова различны и состоят только маленьких букв английского алфавита.
# Формат вывода

# Выведите nn строк, по одной строке для каждого слова из входных данных (в порядке следования во входных данных) – минимальное по длине подходящее под условие задачи сокращение, если подходящего сокращения нет, выведите слово без сокращения.
# Пример 1
# Ввод

# 2
# localization
# internationalization

# Вывод

# l10n
# i18n

# Пример 2
# Ввод

# 4
# banana
# apple
# potato
# tomato

# Вывод

# b4a
# a3e
# p4o
# t4o

# Пример 3
# Ввод

# 10
# aaaa
# abaa
# abab
# bbbb
# baba
# aaaaaaaaaaaaaaaaaaaa
# abaaaaaaaaaaaaaaaaaa
# bbbbbbbbbbbbbbbbbbbb
# sjfdhlsakdjfhsald
# sdfasdfsadfafdsfdd

# Вывод

# aaaa
# abaa
# a2b
# b2b
# b2a
# aa16aa
# ab16aa
# b18b
# s15d
# s16d

# Ограничение памяти
# 256.0 Мб
# Ограничение времени
# 4 с
# Ввод
# стандартный ввод или input.txt
# Вывод
# стандартный вывод или output.txt


import sys


def main():
    n = int(input())
    words = [input() for _ in range(n)]
    for word in words:
        if len(word) <= 10:
            print(word)
            continue
        for i in range(1, len(word) // 2 + 1):
            if word[:i] == word[-i:]:
                print(word[:i] + str(len(word) - 2 * i) + word[-i:])
                break
        else:
            print(word)
